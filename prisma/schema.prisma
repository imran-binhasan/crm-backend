// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// RBAC Models
model User {
  id        String   @id @default(uuid())
  firstName String   @db.VarChar(50)
  lastName  String   @db.VarChar(50)
  email     String   @unique @db.VarChar(255)
  password  String
  phone     String?  @db.VarChar(20)
  image     String?
  isActive  Boolean  @default(true)
  roleId    String
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  role      Role     @relation(fields: [roleId], references: [id])
  
  // CRM specific relations
  assignedLeads     Lead[]   @relation("AssignedUser")
  createdLeads      Lead[]   @relation("CreatedUser")
  assignedDeals     Deal[]   @relation("AssignedUser")
  createdDeals      Deal[]   @relation("CreatedUser")
  assignedContacts  Contact[] @relation("AssignedUser")
  createdContacts   Contact[] @relation("CreatedUser")
  assignedCompanies Company[] @relation("AssignedUser")
  createdCompanies  Company[] @relation("CreatedUser")
  
  activities        Activity[] @relation("ActivityCreatedUser")
  assignedActivities Activity[] @relation("ActivityAssignedUser")
  notes            Note[]

  @@map("users")
}

model Role {
  id          String @id @default(uuid())
  name        String @unique @db.VarChar(50)
  description String?
  isActive    Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String @id @default(uuid())
  resource    String @db.VarChar(50) // e.g., 'lead', 'deal', 'contact', 'company', 'user'
  action      String @db.VarChar(50) // e.g., 'create', 'read', 'update', 'delete', 'manage'
  description String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  roles RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model RolePermission {
  id           String @id @default(uuid())
  roleId       String
  permissionId String
  
  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// CRM Entities

model Contact {
  id           String  @id @default(uuid())
  firstName    String  @db.VarChar(50)
  lastName     String  @db.VarChar(50)
  email        String? @db.VarChar(255)
  phone        String? @db.VarChar(20)
  mobile       String? @db.VarChar(20)
  jobTitle     String? @db.VarChar(100)
  department   String? @db.VarChar(100)
  companyId    String?
  assignedToId String?
  createdById  String
  
  // Address fields
  street       String?
  city         String?
  state        String?
  zipCode      String? @db.VarChar(20)
  country      String? @db.VarChar(100)
  
  // Social media
  linkedinUrl  String?
  twitterUrl   String?
  websiteUrl   String?
  
  // Status and source
  status       ContactStatus @default(ACTIVE)
  source       String?       @db.VarChar(50) // e.g., 'website', 'referral', 'cold_call'
  
  isActive     Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  company     Company? @relation(fields: [companyId], references: [id])
  assignedTo  User?    @relation("AssignedUser", fields: [assignedToId], references: [id])
  createdBy   User     @relation("CreatedUser", fields: [createdById], references: [id])
  
  leads       Lead[]
  deals       Deal[]
  activities  Activity[]
  notes       Note[]

  @@map("contacts")
}

model Company {
  id           String @id @default(uuid())
  name         String @db.VarChar(255)
  industry     String? @db.VarChar(100)
  size         CompanySize?
  revenue      Decimal? @db.Decimal(15, 2)
  website      String?
  phone        String? @db.VarChar(20)
  email        String? @db.VarChar(255)
  assignedToId String?
  createdById  String
  
  // Address fields
  street       String?
  city         String?
  state        String?
  zipCode      String? @db.VarChar(20)
  country      String? @db.VarChar(100)
  
  // Social media
  linkedinUrl  String?
  twitterUrl   String?
  
  status       CompanyStatus @default(ACTIVE)
  isActive     Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  assignedTo User?     @relation("AssignedUser", fields: [assignedToId], references: [id])
  createdBy  User      @relation("CreatedUser", fields: [createdById], references: [id])
  
  contacts   Contact[]
  leads      Lead[]
  deals      Deal[]
  activities Activity[]
  notes      Note[]

  @@map("companies")
}

model Lead {
  id           String @id @default(uuid())
  title        String @db.VarChar(255)
  contactId    String?
  companyId    String?
  assignedToId String?
  createdById  String
  
  value        Decimal? @db.Decimal(15, 2)
  source       String?  @db.VarChar(50)
  status       LeadStatus @default(NEW)
  priority     Priority @default(MEDIUM)
  
  // Lead specific fields
  expectedCloseDate DateTime?
  description       String?
  
  isActive     Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  contact    Contact? @relation(fields: [contactId], references: [id])
  company    Company? @relation(fields: [companyId], references: [id])
  assignedTo User?    @relation("AssignedUser", fields: [assignedToId], references: [id])
  createdBy  User     @relation("CreatedUser", fields: [createdById], references: [id])
  
  deals      Deal[]
  activities Activity[]
  notes      Note[]

  @@map("leads")
}

model Deal {
  id           String @id @default(uuid())
  title        String @db.VarChar(255)
  contactId    String?
  companyId    String?
  leadId       String?
  assignedToId String?
  createdById  String
  
  value        Decimal @db.Decimal(15, 2)
  stage        DealStage @default(PROSPECTING)
  probability  Int @default(0) // 0-100
  priority     Priority @default(MEDIUM)
  
  // Deal specific fields
  expectedCloseDate DateTime?
  actualCloseDate   DateTime?
  description       String?
  
  isActive     Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  contact    Contact? @relation(fields: [contactId], references: [id])
  company    Company? @relation(fields: [companyId], references: [id])
  lead       Lead?    @relation(fields: [leadId], references: [id])
  assignedTo User?    @relation("AssignedUser", fields: [assignedToId], references: [id])
  createdBy  User     @relation("CreatedUser", fields: [createdById], references: [id])
  
  activities Activity[]
  notes      Note[]

  @@map("deals")
}

model Activity {
  id           String @id @default(uuid())
  type         ActivityType
  subject      String @db.VarChar(255)
  description  String?
  scheduledAt  DateTime?
  completedAt  DateTime?
  status       ActivityStatus @default(SCHEDULED)
  priority     Priority @default(MEDIUM)
  
  // Relations (polymorphic)
  contactId    String?
  companyId    String?
  leadId       String?
  dealId       String?
  
  assignedToId String?
  createdById  String
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  contact    Contact? @relation(fields: [contactId], references: [id])
  company    Company? @relation(fields: [companyId], references: [id])
  lead       Lead?    @relation(fields: [leadId], references: [id])
  deal       Deal?    @relation(fields: [dealId], references: [id])
  assignedTo User?    @relation("ActivityAssignedUser", fields: [assignedToId], references: [id])
  createdBy  User     @relation("ActivityCreatedUser", fields: [createdById], references: [id])

  @@map("activities")
}

model Note {
  id          String @id @default(uuid())
  content     String
  isPrivate   Boolean @default(false)
  
  // Relations (polymorphic)
  contactId   String?
  companyId   String?
  leadId      String?
  dealId      String?
  
  createdById String
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  contact   Contact? @relation(fields: [contactId], references: [id])
  company   Company? @relation(fields: [companyId], references: [id])
  lead      Lead?    @relation(fields: [leadId], references: [id])
  deal      Deal?    @relation(fields: [dealId], references: [id])
  createdBy User     @relation(fields: [createdById], references: [id])

  @@map("notes")
}

// New Business Models

model Client {
  id                String @id @default(uuid())
  name              String @db.VarChar(255)
  code              String? @unique @db.VarChar(50)
  email             String? @db.VarChar(255)
  phone             String? @db.VarChar(20)
  website           String?
  industry          String? @db.VarChar(100)
  type              ClientType @default(CORPORATE)
  status            ClientStatus @default(ACTIVE)
  taxId             String? @db.VarChar(50)
  billingAddress    String?
  shippingAddress   String?
  description       String?
  notes             String?
  paymentTerms      Int @default(30)
  preferredCurrency String? @default("USD") @db.VarChar(3)
  
  // Relations
  companyId        String?
  primaryContactId String?
  accountManagerId String?
  createdById      String
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  company        Company? @relation(fields: [companyId], references: [id])
  primaryContact Contact? @relation(fields: [primaryContactId], references: [id])
  accountManager User?    @relation("ClientAccountManager", fields: [accountManagerId], references: [id])
  createdBy      User     @relation("ClientCreatedBy", fields: [createdById], references: [id])
  
  projects       Project[]
  invoices       Invoice[]

  @@map("clients")
}

model Project {
  id              String @id @default(uuid())
  name            String @db.VarChar(255)
  code            String? @unique @db.VarChar(50)
  description     String?
  status          ProjectStatus @default(PLANNING)
  priority        Priority @default(MEDIUM)
  type            ProjectType? @default(FIXED_PRICE)
  budget          Decimal? @db.Decimal(15, 2)
  actualCost      Decimal? @db.Decimal(15, 2)
  currency        String? @default("USD") @db.VarChar(3)
  startDate       DateTime?
  endDate         DateTime?
  actualStartDate DateTime?
  actualEndDate   DateTime?
  progress        Int @default(0) // 0-100
  
  // Relations
  clientId         String
  projectManagerId String?
  createdById      String
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  client         Client @relation(fields: [clientId], references: [id])
  projectManager User?  @relation("ProjectManager", fields: [projectManagerId], references: [id])
  createdBy      User   @relation("ProjectCreatedBy", fields: [createdById], references: [id])
  
  teamMembers    ProjectTeamMember[]
  invoices       Invoice[]

  @@map("projects")
}

model ProjectTeamMember {
  id        String @id @default(uuid())
  projectId String
  userId    String
  role      String? @db.VarChar(100)
  joinDate  DateTime @default(now())
  
  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation("ProjectTeamMember", fields: [userId], references: [id])

  @@unique([projectId, userId])
  @@map("project_team_members")
}

model Employee {
  id               String @id @default(uuid())
  employeeId       String @unique @db.VarChar(50)
  firstName        String @db.VarChar(50)
  lastName         String @db.VarChar(50)
  email            String? @db.VarChar(255)
  phone            String? @db.VarChar(20)
  personalEmail    String? @db.VarChar(255)
  dateOfBirth      DateTime?
  gender           Gender?
  maritalStatus    MaritalStatus?
  address          String?
  emergencyContact String? @db.VarChar(255)
  emergencyPhone   String? @db.VarChar(20)
  
  // Employment details
  department       String @db.VarChar(100)
  position         String @db.VarChar(100)
  employmentType   EmploymentType @default(FULL_TIME)
  status           EmployeeStatus @default(ACTIVE)
  hireDate         DateTime
  terminationDate  DateTime?
  salary           Decimal? @db.Decimal(15, 2)
  salaryType       SalaryType?
  workLocation     WorkLocation?
  weeklyHours      Int @default(40)
  
  // Relations
  managerId   String?
  userId      String?
  createdById String
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  manager       Employee?    @relation("EmployeeManager", fields: [managerId], references: [id])
  directReports Employee[]   @relation("EmployeeManager")
  user          User?        @relation("EmployeeUser", fields: [userId], references: [id])
  createdBy     User         @relation("EmployeeCreatedBy", fields: [createdById], references: [id])
  
  attendance    Attendance[]

  @@map("employees")
}

model Attendance {
  id              String @id @default(uuid())
  date            DateTime @db.Date
  checkIn         DateTime?
  checkOut        DateTime?
  hoursWorked     Decimal? @db.Decimal(5, 2)
  breakTime       Decimal? @db.Decimal(5, 2) // in minutes
  status          AttendanceStatus @default(PRESENT)
  workLocation    String? @db.VarChar(100)
  notes           String?
  reasonForAbsence String?
  isOvertime      Boolean @default(false)
  overtimeHours   Decimal? @db.Decimal(5, 2)
  isHoliday       Boolean @default(false)
  isWeekend       Boolean @default(false)
  
  // Geo-location
  latitude        Decimal? @db.Decimal(10, 8)
  longitude       Decimal? @db.Decimal(11, 8)
  ipAddress       String? @db.VarChar(45)
  
  // Relations
  employeeId      String
  approvedById    String?
  createdById     String?
  
  // Approval
  approvedAt      DateTime?
  approvalStatus  ApprovalStatus @default(PENDING)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  employee   Employee @relation(fields: [employeeId], references: [id])
  approvedBy User?    @relation("AttendanceApprovedBy", fields: [approvedById], references: [id])
  createdBy  User?    @relation("AttendanceCreatedBy", fields: [createdById], references: [id])

  @@unique([employeeId, date])
  @@map("attendance")
}

model Invoice {
  id               String @id @default(uuid())
  invoiceNumber    String @unique @db.VarChar(50)
  status           InvoiceStatus @default(DRAFT)
  issueDate        DateTime
  dueDate          DateTime
  paidDate         DateTime?
  description      String?
  notes            String?
  terms            String?
  
  // Financial details
  subtotal         Decimal @db.Decimal(15, 2)
  taxAmount        Decimal @default(0) @db.Decimal(15, 2)
  discountAmount   Decimal @default(0) @db.Decimal(15, 2)
  totalAmount      Decimal @db.Decimal(15, 2)
  paidAmount       Decimal @default(0) @db.Decimal(15, 2)
  balanceAmount    Decimal @db.Decimal(15, 2)
  currency         String @default("USD") @db.VarChar(3)
  exchangeRate     Decimal? @db.Decimal(10, 6)
  
  // Payment details
  paymentMethod    String? @db.VarChar(50)
  paymentReference String? @db.VarChar(255)
  
  // Relations
  clientId    String
  projectId   String?
  createdById String
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  client    Client        @relation(fields: [clientId], references: [id])
  project   Project?      @relation(fields: [projectId], references: [id])
  createdBy User          @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
  
  items     InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id         String @id @default(uuid())
  description String @db.VarChar(255)
  quantity   Decimal @db.Decimal(10, 2)
  unitPrice  Decimal @db.Decimal(15, 2)
  totalPrice Decimal @db.Decimal(15, 2)
  taxRate    Decimal? @db.Decimal(5, 2)
  taxAmount  Decimal? @db.Decimal(15, 2)
  unit       String? @db.VarChar(50)
  
  // Relations
  invoiceId String
  
  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Report {
  id               String @id @default(uuid())
  name             String @db.VarChar(255)
  description      String?
  type             ReportType
  format           ReportFormat @default(PDF)
  status           ReportStatus @default(PENDING)
  startDate        DateTime?
  endDate          DateTime?
  filters          Json? // Store filters as JSON
  columns          Json? // Store column selection as JSON
  query            String? // For custom reports
  filePath         String?
  fileUrl          String?
  fileSize         BigInt?
  generatedAt      DateTime?
  errorMessage     String?
  isScheduled      Boolean @default(false)
  schedulePattern  String? // Cron pattern
  nextRunAt        DateTime?
  lastRunAt        DateTime?
  emailOnCompletion Boolean @default(false)
  emailRecipients  Json? // Store email list as JSON
  
  // Relations
  createdById String
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  createdBy User @relation("ReportCreatedBy", fields: [createdById], references: [id])

  @@map("reports")
}

// Enums
enum ContactStatus {
  ACTIVE
  INACTIVE
  QUALIFIED
  UNQUALIFIED
  CONVERTED
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  CLIENT
  FORMER_CLIENT
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  CONVERTED
  CLOSED_LOST
}

enum DealStage {
  PROSPECTING
  QUALIFICATION
  NEEDS_ANALYSIS
  VALUE_PROPOSITION
  DECISION_MAKERS
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  TASK
  NOTE
  DEMO
  FOLLOW_UP
}

enum ActivityStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}